[package]

name = "omnibor"
version = "0.6.0"

description = "Reproducible software identity and fine-grained build dependency tracking."
repository = "https://github.com/omnibor/omnibor-rs"
readme = "README.md"
categories = ["cryptography", "development-tools"]
keywords = ["gitbom", "omnibor", "sbom"]

edition.workspace = true
license.workspace = true
homepage.workspace = true

[lib]
crate-type = [
    # Let the Rust compiler choose a "recommended" lib type for use by Rust code.
    "lib",

    # A system-specific static library usable by non-Rust code.
    # This is `*.a` on Linux, macOS, and Windows using the MinGW toolchain.
    # This is `*.lib` on Windows using the MSVC toolchain.
    "staticlib",

    # A system-specific dynamic library usable by non-Rust code.
    # This is a `*.so` file on Linux.
    # This is a `*.dylib` file on macOS.
    # This is a `*.dll` file on Windows.
    "cdylib",
]

[dependencies]

gitoid = { version = "0.8.0", path = "../gitoid", default-features = false, features = [
    "async",
    "hex",
    "rustcrypto",
    "sha256",
    "std",
    "url",
] }
hyperpolyglot = { version = "0.1.7", optional = true }
infer = { version = "0.16.0", optional = true }
pathbuf = "1.0.0"
serde = { version = "1.0.197", optional = true }
thiserror = "1.0.60"
tokio = { version = "1.36.0", features = ["io-util"] }
url = "2.5.0"
walkdir = "2.5.0"

[dev-dependencies]

digest = "0.10.7"
pathbuf = "1.0.0"
serde_test = "1.0.176"
tokio = { version = "1.36.0", features = ["io-util", "fs"] }
tokio-test = "0.4.3"

[features]

default = ["serde", "builtin_embedding"]

# Support serde serialization and deserialization
serde = ["dep:serde", "gitoid/serde"]

# Infer embedding target type automatically.
#
# Use this if you general-purpose embedding without having to really think
# about it. This uses the `hyperpolyglot` and `infer` crates to identify what
# kind of file the target is when producing an input manifest, and then
# (if the file type is supported) automatically performs the right kind of
# embedding on that file.
#
# If you _know_ already what your target file types are, and can implement a
# simpler target detection algorithm yourself, you can turn this feature off
# and provide your own custom embedding function when producing an
# `InputManifest`. This will help reduce the amount of code you're pulling in.
builtin_embedding = ["dep:hyperpolyglot", "dep:infer"]
