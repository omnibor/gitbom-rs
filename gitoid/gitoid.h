/**
 * @file
 * @brief "GitBom"
 */


#ifndef gitbom_h
#define gitbom_h

/* Generated with cbindgen:0.24.3 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * The available algorithms for computing hashes
 */
typedef enum HashAlgorithm {
  /**
   * [SHA1](https://en.wikipedia.org/wiki/SHA-1)
   */
  HashAlgorithm_Sha1,
  /**
   * [SHA256](https://en.wikipedia.org/wiki/SHA-2)
   */
  HashAlgorithm_Sha256,
} HashAlgorithm;

/**
 * The types of objects for which a `GitOid` can be made.
 */
typedef enum ObjectType {
  /**
   * An opaque git blob.
   */
  ObjectType_Blob,
  /**
   * A Git tree.
   */
  ObjectType_Tree,
  /**
   * A Git commit.
   */
  ObjectType_Commit,
  /**
   * A Git tag.
   */
  ObjectType_Tag,
} ObjectType;

/**
 * A struct that computes [gitoids][g] based on the selected algorithm
 *
 * [g]: https://git-scm.com/book/en/v2/Git-Internals-Git-Objects
 */
typedef struct GitOid {
  /**
   * The hash algorithm being used.
   */
  enum HashAlgorithm hash_algorithm;
  /**
   * The type of object being represented.
   */
  enum ObjectType object_type;
  /**
   * The length of the hashed data in number of bytes.
   *
   * Invariant: this must always be less than `NUM_HASH_BYTES`.
   */
  uintptr_t len;
  /**
   * The buffer storing the actual hashed bytes.
   */
  uint8_t value[NUM_HASH_BYTES];
} GitOid;

struct GitOid new_from_bytes(enum HashAlgorithm hash_algorithm,
                             enum ObjectType object_type,
                             const uint8_t *content,
                             uintptr_t content_len);

#endif /* gitbom_h */
