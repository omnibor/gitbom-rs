[package]
categories = ["cryptography", "development-tools"]
description = "Git Object Identifiers in Rust"
keywords = ["gitbom", "omnibor", "sbom", "gitoid"]
name = "gitoid"
readme = "README.md"
repository = "https://github.com/omnibor/omnibor-rs"
version = "0.9.0"
homepage.workspace = true
license.workspace = true
edition.workspace = true

[dependencies]

# no_std compatible dependencies.

# NOTE: Must match the version used in the hash crate.
#
# Technically, we could rely on the re-export from one of those crates,
# but since all the hash crates are optional dependencies our usage code
# within the 'gitoid' crate would be more complex to handle the possibility
# for any/all of them to be missing. It's simpler to just specify it here
# so we know we always get the crate.
digest = { version = "0.10.7" }

sha1 = { version = "0.10.6", default-features = false, optional = true }
sha1collisiondetection = { version = "0.3.3", default-features = false, features = [
    "digest-trait",
], optional = true }
sha2 = { version = "0.10.8", default-features = false, optional = true }

# std-requiring dependencies.

hex = { version = "0.4.3", optional = true }
serde = { version = "1.0.197", optional = true }
tokio = { version = "1.36.0", features = ["io-util"], optional = true }
url = { version = "2.4.1", optional = true }
boring = { version = "4.6.0", optional = true }
openssl = { version = "0.10.66", optional = true }
bytecount = { version = "0.6.8" }

[dev-dependencies]

# Need "rt" and "fs" additionally for tests.
tokio = { version = "1.36.0", features = [
    "io-util",
    "fs",
    "rt",
    "rt-multi-thread",
] }
serde_test = "1.0.176"
criterion = { version = "0.5.1" }

[features]

# By default, you get:
#
# - Async support.
# - The 'rustcrypto' backend.
# - The SHA-256 algorithm.
# - Standard library support.
default = ["async", "backend-rustcrypto", "hash-sha256", "std"]

# Async support is optional. That said, it's currently _only_ with Tokio,
# meaning you'd need to handle integrating with any other async runtime
# yourself. In the future it may be nice to make our async support fully
# generic and not specific to a given runtime.
#
# Note also that async support implies using the standard library, as Tokio
# is not `no_std`-compatible.
async = ["dep:tokio", "std"]

# All hash algorithms are optional, though you need to have at least one
# algorithm turned on for this crate to be useful. This is intended to
# just let you avoid paying the cost of algorithms you don't use.
hash-sha1 = ["dep:sha1"]
hash-sha1cd = ["dep:sha1collisiondetection"]
hash-sha256 = ["dep:sha2"]

# Get standard library support.
#
# This feature is enabled by default. You can disable it to run in
# environments without `std`, usually embedded environments.
std = [
    "digest/std",
    "sha1?/std",
    "sha1collisiondetection?/std",
    "sha2?/std",
    "bytecount/runtime-dispatch-simd",
    "dep:hex",
    "dep:serde",
    "dep:url",
]

# Enable using RustCrypto as a cryptography backend.
backend-rustcrypto = []

# Enable using BoringSLL as a cryptography backend.
#
# NOTE: This unconditionally turns on the "sha1" and "sha256" features,
# because the `boring` crate which provides the BoringSSL cryptography
# implementations does not permit conditionally compiling those
# implementations out. Since they're _always_ present, we might as well
# use them unconditionally.
backend-boringssl = ["dep:boring", "hash-sha1", "hash-sha256"]

# Enable using OpenSSL as a cryptography backend.
#
# NOTE: Like the "boringssl" feature, this unconditionally turns on
# the "sha1" and "sha256" features, as they're not able to be
# conditionally compiled out of the dependency, so there's no reason to omit
# them here.
backend-openssl = ["dep:openssl", "hash-sha1", "hash-sha256"]

[[bench]]
name = "benchmark"
harness = false
